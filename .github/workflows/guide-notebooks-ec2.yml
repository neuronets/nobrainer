name: Guide Notebooks Regression - EC2
run-name: Guide Notebooks Regression - EC2
on: [push]
jobs:
  start_ec2_runner:
    runs-on: ubuntu-latest
    env:
      AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
      AWS_KEY_SECRET: ${{ secrets.AWS_KEY_SECRET }}
      AWS_GH_RUNNER_KEY: ${{ secrets.AWS_GH_RUNNER_KEY }}
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
      AWS_INSTANCE_TYPE: ${{ vars.AWS_INSTANCE_TYPE }}
      AWS_IMAGE_ID: ${{ vars.AWS_IMAGE_ID }}
      AWS_SECURITY_GROUP: ${{ vars.AWS_SECURITY_GROUP }}
    outputs:
      EC2_INSTANCE_ID: ${{ steps.create_instance.outputs.EC2_INSTANCE_ID }}
      RUNNER_LABEL: ${{ steps.create_instance.outputs.EC2_PUBLIC_DNS }}
    steps:
      - name: configure_aws
        run: |
          set -xe
          sudo apt update
          sudo apt install -y awscli jq
          mkdir ${HOME}/.aws
          echo "[default]" > ${HOME}/.aws/credentials
          echo "aws_access_key_id = ${AWS_KEY_ID}" >> ${HOME}/.aws/credentials
          echo "aws_secret_access_key = ${AWS_KEY_SECRET}" >> ${HOME}/.aws/credentials
          echo "region = us-east-1" >> ${HOME}/.aws/credentials
          cat ${HOME}/.aws/credentials
      - name: create_instance
        id: create_instance
        run: |
          set -xe
          output=$(aws ec2 run-instances \
            --instance-type ${AWS_INSTANCE_TYPE} \
            --image-id ${AWS_IMAGE_ID} \
            --security-group-ids ${AWS_SECURITY_GROUP} \
            --count 1)
          EC2_INSTANCE_ID=$(echo ${output} | jq -r ".Instances[0].InstanceId")

          EC2_PUBLIC_DNS=''
          while [ -z ${EC2_PUBLIC_DNS} ]; do
            EC2_PUBLIC_DNS=$(aws ec2 describe-instances \
              --instance-ids ${EC2_INSTANCE_ID} \
              | jq -r ".Reservations[0].Instances[0].PublicDnsName")
            sleep 1
          done
          echo "EC2_INSTANCE_ID=${EC2_INSTANCE_ID}" >> "$GITHUB_OUTPUT"
          echo "EC2_PUBLIC_DNS=${EC2_PUBLIC_DNS}" >> "$GITHUB_OUTPUT"
          echo "EC2_PUBLIC_DNS=${EC2_PUBLIC_DNS}" >> "$GITHUB_ENV"
      - name: register_runner
        id: register_runner
        run: |
          set -xe
          echo ${AWS_GH_RUNNER_KEY} > gh_runner_key
          chmod 600 gh_runner_key
          echo ${GH_TOKEN} > gh_token
          scp -o StrictHostKeyChecking=accept-new -i gh_runner_key gh_token ubuntu@${EC2_PUBLIC_DNS}:gh_token
          scp -i gh_runner_key provision_runner.sh ubuntu@${EC2_PUBLIC_DNS}:provision_runner.sh
          ssh -i gh_runner_key bash provision_runner.sh


  guide_notebooks_regression_ec2:
    runs-on: ${{ needs.start_ec2_runner.outputs.RUNNER_LABEL }}
    needs: start_ec2_runner
    steps:
      - name: verify-instance
        env:
          EC2_INSTANCE_ID: ${{ needs.start_ec2_runner.outputs.EC2_INSTANCE_ID }}
        run: |
          set -xe
          if [[ $(ec2metadata --instance-id) != ${EC2_INSTANCE_ID} ]]; then
            echo "Running on the wrong instance! Bailing, but try rerunning"
            exit 1
          fi
      - name: clone
        uses: actions/checkout@v3
      - name: install
        run: |
          set -xe
          cd ${{ github.workspace }}
          python -m venv env
          source env/bin/activate
          pip install --upgrade pip
          pip install matplotlib nilearn
          pip install -e .
          nobrainer info
      - name: run
        run: |
          set -xe
          cd ${{ github.workspace }}
          git clone https://github.com/neuronets/nobrainer-book.git
          cd nobrainer-book

          # if there is a matching book branch, switch to it
          if [ $(git ls-remote --heads https://github.com/neuronets/nobrainer-book.git ${{ github.ref_name }} | wc -l) -ne 0 ]; then
            echo "Checking out branch ${{ github.ref_name }}"
            git checkout ${{ github.ref_name }};
          else
            echo "No matching branch found, sticking with the default"
          fi

          cd ${{ github.workspace }}
          source env/bin/activate
          for notebook_script in $(ls nobrainer-book/docs/nobrainer-guides/scripts/*.py); do
            echo "running ${notebook_script}"
            python ${notebook_script}
          done

  stop_ec2_runner:
    if: always()
    runs-on: ubuntu-latest
    needs: [start_ec2_runner, guide_notebooks_regression_ec2]
    env:
      AWS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
      AWS_KEY_SECRET: ${{ secrets.AWS_KEY_SECRET }}
    steps:
      - name: configure_aws
        run: |
          set -xe
          sudo apt update
          sudo apt install -y awscli
          mkdir ${HOME}/.aws
          echo "[default]" > ${HOME}/.aws/credentials
          echo "aws_access_key_id = ${AWS_KEY_ID}" >> ${HOME}/.aws/credentials
          echo "aws_secret_access_key = ${AWS_KEY_SECRET}" >> ${HOME}/.aws/credentials
          echo "region = us-east-1" >> ${HOME}/.aws/credentials
          cat ${HOME}/.aws/credentials
      - name: deregister_runner
        id: deregister_runner
        env:
          EC2_INSTANCE_ID: ${{ needs.start_ec2_runner.outputs.RUNNER_LABEL }}
        run: |
          set -xe
          echo ${AWS_GH_RUNNER_KEY} > gh_runner_key
          chmod 600 gh_runner_key
          echo ${GH_TOKEN} > gh_token
          scp -o StrictHostKeyChecking=accept-new -i gh_runner_key gh_token ubuntu@${EC2_PUBLIC_DNS}:gh_token
          scp -i gh_runner_key destroy_runner.sh ubuntu@${EC2_PUBLIC_DNS}:destroy_runner.sh
          ssh -i ${HOME}/.ssh/gh_runner bash destroy_runner.sh
      - name: stop_runner
        if: always()
        env:
          EC2_INSTANCE_ID: ${{ needs.start_ec2_runner.outputs.EC2_INSTANCE_ID }}
        run: |
          set -xe
          aws ec2 terminate-instances --instance-ids ${EC2_INSTANCE_ID}
